''' Functions to plot lightcurves for WFCAM data.

Publicly available: 
plot_lc (make it just lc someday?)
plot_phase (make it just phase someday)

'''

import atpy
import numpy as np
import matplotlib.pyplot as plt
import coords


def season_cut (table, sid, season, flags=-1) :
    ''' Returns a subset of a table that corresponds to 
    one source for one season. 

    Also filters datapoints for quality!

    Arguments:
      table: an atpy table
      sid: a Source ID from WFCAM (13 digits)
      season: Which observing season of our dataset (1,2, or 3)

    Keywords:
      flags: whether to remove bad observations (default: no)
             and where to draw the cutoff.
    '''

    source = table.where(table.SOURCEID == sid)

    offset = 54579
    cut1 = 100
    cut2 = 300
    cut3 = 600

    if season == 1:
        low = offset
        high = offset+cut1
    elif season == 2:
        low = offset+cut1
        high = offset+cut2
    elif season == 3:
        low = offset+cut2
        high = offset+cut3
    else:
        low = offset
        high = offset+cut3
    
    source = source.where(source.MEANMJDOBS < high)
    source = source.where(source.MEANMJDOBS > low)

    if flags >= 0:
        source = source.where(source.JPPERRBITS <= flags)
        source = source.where(source.HPPERRBITS <= flags)
        source = source.where(source.KPPERRBITS <= flags)
    
    return source

def plot_jhmk (table,sid, outfile='', sup='', box=True, 
             bands='jhk', season = 123, text=True) :
    ''' Plots J and H-K lightcurves in 3 seasons (separated) over time.
    '''

    s_table = season_cut(table, sid, 123)
    date = s_table.MEANMJDOBS - 54579
    
    jcol = s_table.JAPERMAG3
    hmkcol=s_table.HMKPNT

    jerr = s_table.JAPERMAG3ERR
    hmkerr=s_table.HMKPNTERR

    plt.clf()

    ax1 = plt.subplot(2,3,1)
    ax2 = plt.subplot(2,3,2, sharey=ax1)
    ax3 = plt.subplot(2,3,3, sharey=ax1)

    sx1 = plt.subplot(2,3,4, sharex=ax1)
    sx2 = plt.subplot(2,3,5, sharex=ax2)
    sx3 = plt.subplot(2,3,6, sharex=ax3)

    for ax in (ax1,ax2,ax3):
        ax
        plt.errorbar(date, jcol, yerr=jerr, fmt='k-o', ecolor='k')

    for sx in (sx1,sx2,sx3):
        sx
        plt.errorbar(date, hmkcol, yerr=hmkerr, fmt='k-o', ecolor='k')

    ax1
    plt.gca().invert_yaxis()
    plt.ylabel("WFCAM J Magnitude")
    
    sx1
    d = 54579
    plt.xlim(d, d+100)
    plt.xlabel("Season 1")
    sx2
    plt.xlim(d+100,d+300)
    plt.xlabel("Season 2")
    sx3
    plt.xlim(d+300,d+600)
    plt.xlabel("Season 3")

    plt.show()
    return True

# junk:
'''

    s_table1 = season_cut(table, sid, 1)
    s_table2 = season_cut(table, sid, 2)
    s_table3 = season_cut(table, sid, 3)

    date1 = s_table1.MEANMJDOBS - 54579
    date2 = s_table2.MEANMJDOBS - 54579
    date3 = s_table3.MEANMJDOBS - 54579

    j1 = s_table1.JAPERMAG3
    jmk1=s_table1.JMKPNT
    j2 = s_table2.JAPERMAG3
    jmk2=s_table2.JMKPNT
    j3 = s_table3.JAPERMAG3
    jmk3=s_table3.JMKPNT

'''
#/end junk

def plot_5 (table,sid, outfile='', name='?', season = 2) :
    ''' Plots all five lightcurves of one star: J, H, K, J-H, H-K, 
    on one page, for one season.
    '''

    # Loading up the relevant datapoints to plot (note I set flags to 0)
    s_table = season_cut(table, sid, season, flags=0)

    if len(s_table) == 0:
        print "no data here"
        return

    date = s_table.MEANMJDOBS - 54579

    jcol = s_table.JAPERMAG3
    hcol = s_table.HAPERMAG3
    kcol = s_table.KAPERMAG3
    jmh =  s_table.JMHPNT
    hmk =  s_table.HMKPNT

    jerr = s_table.JAPERMAG3ERR
    herr = s_table.HAPERMAG3ERR
    kerr = s_table.KAPERMAG3ERR
    jmherr=s_table.JMHPNTERR
    hmkerr=s_table.HMKPNTERR
    # Done loading up data.
    
    # Let's create that plot.
    fig = plt.figure(num=None, figsize=(8.5,11), dpi=80, 
                     facecolor='w', edgecolor='k')
    
    left = .125
    width= .775
    bottom = np.arange(.1, .9, .16)
    height = .16

    ax_hmk = fig.add_axes( [left, bottom[0], width, height] )
#    ax_kdex=

    ax_jmh = fig.add_axes( [left, bottom[1], width, height] ,sharex=ax_hmk)
    ax_k  =  fig.add_axes( [left, bottom[2], width, height] ,sharex=ax_hmk)
    ax_h  =  fig.add_axes( [left, bottom[3], width, height] ,sharex=ax_hmk)
    ax_j  =  fig.add_axes( [left, bottom[4], width, height] ,sharex=ax_hmk)
    

    # Plot J-band:
    ax_j.errorbar( date, jcol, yerr=jerr, fmt='b-o', ecolor='k' )
    ax_j.invert_yaxis()
#    ax_j.set_xticklabels([])

    # Plot H-band:
    ax_h.errorbar( date, hcol, yerr=herr, fmt='g-o', ecolor='k' )
    ax_h.invert_yaxis()

    # Plot K-band:
    ax_k.errorbar( date, kcol, yerr=kerr, fmt='r-o', ecolor='k' )
    ax_k.invert_yaxis()

    # Plot J-H color:
    ax_jmh.errorbar( date, jmh, yerr=jmherr, fmt='k-o', ecolor='k' )


    # Plot H-K color:
    ax_hmk.errorbar( date, hmk, yerr=hmkerr, fmt='k-o', ecolor='k' )

    # Done plotting.

    plt.setp(ax_j.get_xticklabels(), visible=False)
    plt.setp(ax_h.get_xticklabels(), visible=False)
    plt.setp(ax_k.get_xticklabels(), visible=False)
    plt.setp(ax_jmh.get_xticklabels(), visible=False)

    # Now let's create labelling information!

    ax_hmk.set_xlabel( "Time (JD since 04/23/2008)" )
    ax_j.set_ylabel( "J mag" )
    ax_h.set_ylabel( "H mag" )
    ax_k.set_ylabel( "K mag" )
    ax_jmh.set_ylabel( "J-H color" )
    ax_hmk.set_ylabel( "H-K color" )

    jmean = jcol.mean()
    hmean = hcol.mean()
    kmean = kcol.mean()
    jrms, hrms, krms = jcol.std(), hcol.std(), kcol.std()

    sra, sdec = s_table.RA[0], s_table.DEC[0]
    sPosition = coords.Position((sra,sdec), units='rad')
    sPositionString = sPosition.hmsdms()
    
    # i am aware that the following line is SUCH A MESS
    ax_j.set_title( ("Object %s.\t" %name)+ (r"$J_{mean} =$ %.2f, $H_{mean} =$ %.2f, $K_{mean} =$ %.2f, " % 
                    (jmean, hmean, kmean) ) + "\nSeason %d \t" % season +
                    r"$J_{RMS} =$ %.3f, $H_{RMS} =$ %.3f, $K_{RMS} =$ %.3f" % (jrms, hrms, krms) )
    
    plt.suptitle( "Position: %s,       Source ID %d." % (sPositionString, sid))

    if outfile == '':
        plt.show()
    else:
        plt.savefig(outfile)
        plt.close()



def plot_lc (table,sid, outfile='', sup='', box=True, 
             bands='jhk', season = 123, text=True) :
    ''' Plots J,H,K lightcurves WITH ERRORBARS for a given input source.

    Written with WFCAM columns in mind, specifically like from WSERV1.
    '''
    
#    w = numpy.where( table.SOURCEID == sid )

    s_table = season_cut(table, sid, season)

    ra1, ra2 = 314.36, 315.77
    dec1,dec2= 52.02, 52.92

    rabox = [ra1, ra1, ra2, ra2, ra1]
    decbox= [dec1,dec2,dec2,dec1,dec1]

#    print w
#    print table.RA[w]
##    print s_table.RA
#    sra, sdec = table.RA[w][0], table.DEC[w][0]
    sra, sdec = s_table.RA[0], s_table.DEC[0]

    date = s_table.MEANMJDOBS - 54579

    jcol = s_table.JAPERMAG3
    hcol = s_table.HAPERMAG3
    kcol = s_table.KAPERMAG3

    jerr = s_table.JAPERMAG3ERR
    herr = s_table.HAPERMAG3ERR
    kerr = s_table.KAPERMAG3ERR

    plt.clf()

    # This is the size of the lightcurve box
    if box:
        plt.axes([.05,.1,.7,.8])
        
    if 'j' in bands:
        plt.errorbar(date,jcol,yerr=jerr,fmt='b-o',ecolor='k',
                     label="J-band, RMS: %f" % jcol.std())
    if 'h' in bands:
        plt.errorbar(date,hcol,yerr=herr,fmt='g-o',ecolor='k',
                     label="H-band, RMS: %f" % hcol.std())
    if 'k' in bands:
        plt.errorbar(date,kcol,yerr=kerr,fmt='r-o',ecolor='k',
                     label="K-band, RMS: %f" % kcol.std())

    plt.gca().invert_yaxis()

    if text:
        plt.legend()

        '''
        if 'j' in bands:
            plt.text(20,jcol.max()+.1,"J-band RMS: %f" % jcol.std())
        if 'h' in bands:
            plt.text(20,hcol.max()+.1,"H-band RMS: %f" % hcol.std())
        if 'k' in bands:
            plt.text(20,kcol.max()+.1,"K-band RMS: %f" % kcol.std())
            '''

    plt.ylabel("WFCAM magnitude")
    plt.xlabel("Julian days since 04/23/2008")
    plt.title("J, H, K with errorbars. Source ID %d." % sid)
    plt.suptitle(sup)

    # This is the size of the position box
    if box:
        plt.axes([.775,.55,.2,.35])
        plt.plot(rabox, decbox)
        plt.plot(np.degrees(sra),np.degrees(sdec),'rD')
    
        dx = 1/8. * (ra2-ra1)
        dy = 1/8. * (dec2-dec1)
        arrx = ra1 + 2*dx
        arry = dec1+6*dy
        plt.arrow(arrx,arry,dx,0)
        plt.arrow(arrx,arry,0,dy)
        
        plt.gca().invert_xaxis()
        
        plt.ylabel("Dec, degrees")
        plt.xlabel("RA, degrees")

        plt.axis('off')

    if outfile == '':
        plt.show()
    else:
        plt.savefig(outfile)
    return


def plot_phase (table, sid, period, band='j', outfile='', season=123,
                offset=0,clear=True):
    ''' Plots magnitude as a function of phase for one source in one band. '''

    # Yo! This needs one more argument! A constant term to shift over by...
    # I'll make it scaled to phase (i.e. between 0 and 1)

    if band.lower() not in ['j','h','k','jmh','hmk']:
        print "Error: keyword 'band' must be 'j','h', 'k', 'jmh', or 'hmk'."
        print "Keyword 'band' defaulting to 'j'."
        band = 'j'
    
    if 'm' in band.lower():
        bandname = band.upper() + "PNT"
        thing = 'color'
    else:
        bandname = band.upper() + "APERMAG3"
        thing = 'magnitude'

#    w = numpy.where( table.SOURCEID == sid )

    s_table = season_cut(table, sid, season)

    # ra1, ra2 = 314.36, 315.77
    # dec1,dec2= 52.02, 52.92

    # rabox = [ra1, ra1, ra2, ra2, ra1]
    # decbox= [dec1,dec2,dec2,dec1,dec1]

    # sra, sdec = table.RA[w][0], table.DEC[w][0]

    date = s_table.MEANMJDOBS #- 54579
    phase = ((date % period) / period + offset) % 1.

    mag = s_table.data[bandname]
    err = s_table.data[bandname+"ERR"]

    if clear:
        plt.clf()

    ax = plt.gca()

    plt.errorbar(phase,mag,yerr=err,fmt='ko')#,ecolor='k')
#    plt.errorbar(phase-1,mag,yerr=err,fmt='ko',ecolor='0.7', alpha=0.3) 
    plt.errorbar(phase-1,mag,yerr=err,fmt='o', mfc='0.7',mec='0.7', 
                 ecolor='0.7')
    plt.errorbar(phase+1,mag,yerr=err,fmt='o', mfc='0.7',mec='0.7', 
                 ecolor='0.7')
#    plt.errorbar(phase+1,mag,yerr=err,fmt='ko',ecolor='0.7', alpha=0.3) 


    plt.xticks( [0, 0.5, 1] )
    ax.set_xticks( np.arange(-.5,1.5,.1), minor=True)

    plt.xlim(-0.25, 1.25)

    if len(band) == 1:
        plt.gca().invert_yaxis()

    plt.ylabel("WFCAM %s %s" % (band.upper(), thing))
    plt.xlabel("Phase")

    if period < 1:
        period_string = "%f hours" % (period*24)
        print period_string
    else:
        period_string = "%f days" % period

    plt.title ("Phase-shifted lightcurve. Source ID %d. Period: %s." %
               (sid, period_string))

    if outfile == '':
        plt.show()
    else:
        plt.savefig(outfile)
    return

    
